
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>John Jarvis</title>
   <link>https://jarv.org/</link>
   <description>Recent content on John Jarvis</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <lastBuildDate>Sat, 10 Jun 2023 00:00:00 +0000</lastBuildDate>
   
       <atom:link href="https://jarv.org/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Caddy and containers are my new goto stack for side projects</title>
       <link>https://jarv.org/posts/caddy-containers/</link>
       <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/caddy-containers/</guid>
       <description></description>
     </item>
   
     <item>
       <title>Running a command with a timeout in Go</title>
       <link>https://jarv.org/posts/command-with-timeout/</link>
       <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/command-with-timeout/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve been slowly re-writing most of &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;cmdchallenge&lt;/a&gt; in Go.
It started with &lt;a href=&#34;https://jarv.org/posts/from-serverless-to-server/&#34;&gt;porting all of the Python code running in AWS Lambda&lt;/a&gt;, and now I am in the process of re-writing the command runner.
This is the component that executes user provided commands, originally written in &lt;a href=&#34;https://nim-lang.org/&#34;&gt;Nim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The command runner takes user submitted shell commands and executes them in a Docker container.
In the Go program, I initially used &lt;code&gt;exec.CommandContext()&lt;/code&gt; and &lt;code&gt;.CombinedOutput()&lt;/code&gt;.
This met the following requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A command to be executed but the execution needs to be time constrained&lt;/li&gt;
&lt;li&gt;Fetching the output of the command with combined STDOUT and STDERR&lt;/li&gt;
&lt;li&gt;Getting the command&amp;rsquo;s exit code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Initially using &lt;code&gt;exec.CommandContext()&lt;/code&gt; and &lt;code&gt;.CombinedOutput()&lt;/code&gt; seemed like a good fit since I could use &lt;a href=&#34;https://pkg.go.dev/context&#34;&gt;context&lt;/a&gt; to send a kill signal to constrain how long the command would run.
However, I noticed some odd behavior as it related to setting timeouts.&lt;/p&gt;
&lt;p&gt;Take the following two examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;starting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctx, cancel &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;WithTimeout&lt;/span&gt;(context.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;time.Second)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;cancel&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shArgs &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;sleep 10&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_, err &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; exec.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CommandContext&lt;/span&gt;(ctx, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;, shArgs&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CombinedOutput&lt;/span&gt;(); err &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Fatalf&lt;/span&gt;(err.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Error&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;finished&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 2022/09/27 19:08:04 starting
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 2022/09/27 19:08:14 signal: killed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctx, cancel &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;WithTimeout&lt;/span&gt;(context.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;time.Second)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;cancel&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shArgs &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;sleep 10&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; exec.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CommandContext&lt;/span&gt;(ctx, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;, shArgs&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Run&lt;/span&gt;(); err &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Fatalf&lt;/span&gt;(err.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Error&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;finished&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 2022/09/27 19:10:13 starting
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 2022/09/27 19:10:15 signal: killed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note how the first example reports that the program is killed, but not until a full 10 seconds.
Here, setting the timeout doesn&amp;rsquo;t seem to do anything at all.
In the second example, the program resumes after the 2 second timeout as we would expect.&lt;/p&gt;
&lt;p&gt;The key difference is that in the second example, we fetch the output.
Let&amp;rsquo;s take a closer look at what process is being killed and what happens to the &lt;code&gt;sleep 10&lt;/code&gt;.
Assuming our program is called &lt;code&gt;timeouttest&lt;/code&gt;, the process tree starts like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash,1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  `-timeouttest,8019
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |-sh,8024 -c sleep 10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |   `-sleep,7694 10
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After 2 seconds, &lt;code&gt;sh&lt;/code&gt; is sent a &lt;code&gt;SIGKILL&lt;/code&gt; and we are left with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash,1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |-sleep,7694 10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  `-timeouttest,8019
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As seen above, &lt;code&gt;sleep 10&lt;/code&gt; becomes an orphan that is adopted by PID 1.
&lt;code&gt;sleep 10&lt;/code&gt; is not killed, because the kill was sent to &lt;code&gt;sh&lt;/code&gt;, and the signal is not propagated to its child.
The main difference between calling &lt;code&gt;.Run()&lt;/code&gt; and &lt;code&gt;.CombinedOutput()&lt;/code&gt; is that the latter creates a buffer for &lt;code&gt;Stdout&lt;/code&gt; for the process and its children, and that the program will wait for that descriptor to close.
This causes Go to hang, while it waits to copy sleep&amp;rsquo;s standard output to the buffer.&lt;/p&gt;
&lt;p&gt;To ensure we can timeout properly, and that the &lt;code&gt;sleep 10&lt;/code&gt; is also killed, we will need to send a &lt;code&gt;SIGKILL&lt;/code&gt; to the process group.
This solves the problem because children created via fork will inherit the parent&amp;rsquo;s process group ID, and a kill sent to the group ID will kill the process and all of its descendants.&lt;/p&gt;
&lt;p&gt;Here is code to kill the group ID after a 2 second timeout. There are multiple ways to implement this, here we are using a channel with select:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;starting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shArgs &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;sleep 10&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmd &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; exec.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Command&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;, shArgs&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmd.SysProcAttr = &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;syscall.SysProcAttr{Setpgid: &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; cmdResult &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    outb []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err  &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmdDone &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;chan&lt;/span&gt; cmdResult, &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    outb, err &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; cmd.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CombinedOutput&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmdDone &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; cmdResult{outb, err}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt;time.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;After&lt;/span&gt;(&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt; time.Second):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    syscall.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Kill&lt;/span&gt;(&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;cmd.Process.Pid, syscall.SIGKILL)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;signal: killed&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt;cmdDone:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;finished&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we are sending a &lt;code&gt;SIGKILL&lt;/code&gt; to the process ID negated, from the &lt;a href=&#34;https://man7.org/linux/man-pages/man2/kill.2.html&#34;&gt;kill man page&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If pid is less than -1, then sig is sent to every process in the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;process group whose ID is -pid.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ensures that we will both timeout after the given time, and that all processes including children are killed.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>From serverless to server</title>
       <link>https://jarv.org/posts/from-serverless-to-server/</link>
       <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/from-serverless-to-server/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m pleased to announce that the transition from a distributed serverless architecture in Python to a single VM with a service written in Go is done for &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;CMDChallenge&lt;/a&gt;.
The final patch was merged and there is nothing sweeter than removing close to 100K lines of vendored Python.&lt;/p&gt;
&lt;p&gt;It was around &lt;a href=&#34;https://jarv.org/posts/golang-rewrite-cmdchallenge/&#34;&gt;4 months ago&lt;/a&gt; that I started on this adventure but honestly a lot of life got in the way and I probably spent a total of around 4 full days of work for the transition.
Overall, I&amp;rsquo;m quite satisfied with the result, as you can see here many of the &amp;ldquo;cloud native&amp;rdquo; services went &lt;em&gt;poof&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/cmd-single-server-arch.png&#34; alt=&#34;single server arch&#34;&gt;&lt;/p&gt;
&lt;p&gt;What enabled this was moving all of the dispatching to the same server that was running containers for commands.
I realize now in hindsight that other than wanting to play around with API gateway when I first built this, there was really no good reason why I shouldn&amp;rsquo;t have done this from the beginning.
Like many side-projects, I guess this turned into a yak-shave where you start thinking about how you can use one cloud service, which eventually turns into ten.&lt;/p&gt;
&lt;p&gt;A quick summary of the &amp;ldquo;new&amp;rdquo; architecture for those who are curious:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is now a single Go service that is responsible for both request handling and launching Docker containers. Previously I was using AWS Lambda and issuing commands to a remote Docker server.&lt;/li&gt;
&lt;li&gt;I still front this with Cloudflare but I removed all command caching at the edge. Every single request goes down to the VM where a Go service is running and returns a cached result (using sqlite) if it was already sent.&lt;/li&gt;
&lt;li&gt;Using Cloudflare means I can use AWS certificates for HTTPs, the origin for Cloudflare is an EC2 instance&lt;/li&gt;
&lt;li&gt;Instead of DynamoDB, I keep the command cache locally on the instance in an SQLite db which is much better and faster for lookups. A backup is periodically kept and restored on instance creation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before, querying solutions from Lambda out of Dynamodb was too slow so I needed to cache solutions with a Lambda cronjob.
Now, with a local SQLite db, they are generated in the context of a request.
For example, &lt;a href=&#34;https://cmdchallenge.com/c/s?slug=hello_world&#34;&gt;this request&lt;/a&gt; is generated with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SELECT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FROM challenges
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WHERE slug=$1 and correct=1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ORDER BY LENGTH(cmd) LIMIT 50;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can&amp;rsquo;t overstate how nice this is compared to do doing very slow lookups over the network to Dynamo.&lt;/p&gt;
&lt;p&gt;Previously I was using CloudWatch alerts and logs, now I have logs going to journald and using Prometheus for metrics.
I also got rid of GoatCounter for anlaytics, because most people have ad blockers anyway, not sure how useful it was. I quickly burned through Sentry&amp;rsquo;s free useage cap so I went ahead and removed that as well.&lt;/p&gt;
&lt;p&gt;With Prometheus running the VM for metrics, it&amp;rsquo;s now more convenient to add metrics for everything imaginable for executing commands:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/processed-cmds.png&#34; alt=&#34;processed-cmds&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/req-per-min.png&#34; alt=&#34;req-per-min&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/cmd-errors.png&#34; alt=&#34;cmd-errors&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another benefit that came out of this is that now it is much easier to validate and run locally, if you want to run the entire site yourself check out &lt;a href=&#34;https://gitlab.com/jarv/cmdchallenge&#34;&gt;https://gitlab.com/jarv/cmdchallenge&lt;/a&gt;.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Update on the Golang rewrite</title>
       <link>https://jarv.org/posts/rewrite-update-1/</link>
       <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/rewrite-update-1/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve been stealing small chunks of time in the evening here and there and finally have a functioning Go rewrite of cmdchallenge which will replace all of the Python code that is running in AWS Lambda.&lt;/p&gt;
&lt;p&gt;The first diff for this is massive, I am really looking forward to removing all of this vendored Python!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/jarv/cmdchallenge/-/merge_requests/165/&#34;&gt;&lt;img src=&#34;https://jarv.org/img/large-diff.png&#34; alt=&#34;large-diff&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And we will say goodbye to some AWS services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloudflare&lt;/li&gt;
&lt;li&gt;Route53&lt;/li&gt;
&lt;li&gt;&lt;s&gt;DynamoDB&lt;/s&gt; Replaced with an sqlite DB&lt;/li&gt;
&lt;li&gt;&lt;s&gt;Lambda&lt;/s&gt; Now written as a Go service running on a VM&lt;/li&gt;
&lt;li&gt;&lt;s&gt;CloudWatch&lt;/s&gt; Not needed&lt;/li&gt;
&lt;li&gt;&lt;s&gt;API Gateway&lt;/s&gt; Not needed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I didn&amp;rsquo;t expect during this rewrite was the joy of having everything running locally, including end-to-end tests in Go. It&amp;rsquo;s quite nice to be able to validate requests and being able to test using a browser locally without having to go through Lambda in the cloud.&lt;/p&gt;
&lt;p&gt;Since a VM for the runner was already a requirement, I will likely stick the new web service on the same VM and keep a local SQLite DB.
What I haven&amp;rsquo;t figured out yet, is how to manage persistence so that I can rebuild the single VM without losing any (or too much) data.
Right now, I&amp;rsquo;m thinking something as simple as a shutdown script that syncs to object storage, and reads on provision.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Golang rewrite of cmdchallenge</title>
       <link>https://jarv.org/posts/golang-rewrite-cmdchallenge/</link>
       <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/golang-rewrite-cmdchallenge/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve decided to take what was written years ago for &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;cmdchallenge.com&lt;/a&gt; and port it to a single Golang app. This is a pretty big change because I will be removing most of the AWS serverless components including API Gateway, Dynamo and possibly CloudFront.
In the process, I would also like to simplify the architecture a bit. It seems like a single process with Docker running locally, and a db like sqlite should be sufficient. Here are some notes for the transition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This will be a small program and I&amp;rsquo;m pretty sure I won&amp;rsquo;t need any frameworks for the REST server&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ll need to do some lex parsing of the submission, &lt;a href=&#34;https://pkg.go.dev/github.com/google/shlex&#34;&gt;https://pkg.go.dev/github.com/google/shlex&lt;/a&gt; should work.&lt;/li&gt;
&lt;li&gt;1 years worth of data is about 300K unique entries in the submission table, in dyamoDB this is about 300MB of data.&lt;/li&gt;
&lt;li&gt;Currently I&amp;rsquo;m keeping track of every single request in a larger submissions table that is used for rate limits, I think this won&amp;rsquo;t be necessary anymore since I can implement in-memory rate limiting without a tracking database.&lt;/li&gt;
&lt;li&gt;I recently moved the runner from Golang to &lt;a href=&#34;https://nim-lang.org/&#34;&gt;Nim&lt;/a&gt;, but I think I&amp;rsquo;ll stick with Nim for now for the runner.&lt;/li&gt;
&lt;li&gt;I would like to look into exporting some metrics to prometheus as well via a &lt;code&gt;/metrics&lt;/code&gt; endpoint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So first thing to do is create a schema for commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;commands&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;fingerprint&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;TEXT&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;challenge_slug&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;TEXT&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;cmd&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;TEXT&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;cmd_length&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;INT&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;correct&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;BOOL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;create_time&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;INT&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;output&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;TEXT&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;source_ip&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;TEXT&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;resp&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;TEXT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;We will use the fingerprint of the command as the primary key for fast cache lookups&lt;/li&gt;
&lt;li&gt;Scans on the sqlite db will be much cheaper than against dynamodb (in both time and money) so I don&amp;rsquo;t think we need a sort key like we did for DyamoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On removing Cloudflare caching, I think it will be interesting to remove it altogether, I assume that cache lookups in sqlite will be performant enought to bypass the extra caching layer.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Does Serverless make sense for a side project?</title>
       <link>https://jarv.org/posts/does-serverless-make-sense/</link>
       <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/does-serverless-make-sense/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;https://12days.cmdchallenge.com&#34;&gt;Command Challenge&lt;/a&gt; has been running for over 3 years now and I would consider it one of those &amp;ldquo;serverless&amp;rdquo; architectures. The front-end services requests using API Gateway and Lambda functions and commands are forwarded to a Docker executor running on a VM.&lt;/p&gt;
&lt;p&gt;Overall, the costs have been minimal thanks to mostly low-ish traffic and keeping it inside the AWS free-tier limits.
By &amp;ldquo;free-tier&amp;rdquo; I mean the &amp;ldquo;always-free&amp;rdquo; limits of an AWS account, since the 12 month trial period for new accounts expired quite some time ago.&lt;/p&gt;
&lt;p&gt;Here is a 2020 update for the services that are used to run the site and a short explanation of what they do.&lt;/p&gt;
&lt;h2 id=&#34;serverless-architecture&#34;&gt;Serverless Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/cmd-architecture.png&#34; alt=&#34;cmd-architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;Where we could probably move all of this to a single VM and reduce some of the configuration complexity, I don&amp;rsquo;t think it would be any cheaper except on a shared hosting provider.&lt;/p&gt;
&lt;p&gt;As you can see in the diagram, this project isn&amp;rsquo;t completely &amp;ldquo;serverless&amp;rdquo; because a server is required for executing user-submitted commands in Docker.
For this, it&amp;rsquo;s a matter of finding the cheapest VM available for this type of workload.&lt;/p&gt;
&lt;h2 id=&#34;free-cloud-services&#34;&gt;Free Cloud Services&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.goatcounter.com&#34;&gt;GoatCounter&lt;/a&gt;&lt;/strong&gt;: An analytics service &lt;a href=&#34;https://www.goatcounter.com/why#what-are-goatcounters-goals&#34;&gt;that respects your privacy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slack&lt;/strong&gt;: Used to receive notifications for unique submissions and errors, useful to keep an eye on what is going on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grafana Cloud&lt;/strong&gt;: Grafana offers a &lt;a href=&#34;https://grafana.com/signup/starter/connect-account&#34;&gt;free starter plan&lt;/a&gt;. This connects to Prometheus which is running on the GCP VM for monitoring Docker and node level metrics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sentry&lt;/strong&gt;: &lt;a href=&#34;https://sentry.io&#34;&gt;Sentry.io&lt;/a&gt; is very nice for side-projects, offering a free tier that I found indispensable for tracking down front-end JS errors in different browser configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitLab&lt;/strong&gt;: &lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab.com&lt;/a&gt; drives the CI pipeline, every new commit on master updates &lt;a href=&#34;https://testing.cmdchallenge.com&#34;&gt;the testing environment&lt;/a&gt;, with a manual promotion to prod.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aws---2month&#34;&gt;AWS - $2/month&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CloudFront&lt;/strong&gt;: Used as the CDN for all requests to the site. HTTP GET requests to &lt;code&gt;/r/*&lt;/code&gt; are for command submissions and are forwarded to the API Gateway. These requests are cached here, so if multiple submissions are sent for the same challenge CloudFront will return a cached response. Other requests that are not command, assets and the static page are forwarded to S3.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S3 bucket&lt;/strong&gt;:  Hosts all static content and serves as the origin for CloudFlare. Also receives periodic updates for user solutions, stored as JSON files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;: Previously REST API, this was &lt;a href=&#34;https://jarv.org/posts/http-api-gateway/&#34;&gt;recently switched to the HTTP API Gateway&lt;/a&gt;. Accepts an HTTP request and forwards it to Lambda function for submissions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lambda&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Submission Handling&lt;/strong&gt;: Responsible for handling submission and rate-limiting logic. It takes a submission and forwards it to the Docker executor. If it receives the same input for a challenge that has already been evaluated, it will return a cached response&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solutions Updater&lt;/strong&gt;: This is split into multiple Lambda functions that look up solutions and writes them to S3 as &lt;code&gt;json&lt;/code&gt; files. It runs in multiple jobs because the queries to DynamoDB span many records and take awhile to run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slack Notfications&lt;/strong&gt;: On every unique successful submission, or error a notification is sent to Slack. This is helpful to keep an eye on what is going on and aids troubleshooting when there are problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DynamoDB&lt;/strong&gt;: Every submission is stored in the database which is used for both rate limiting, and tracking correct/incorrect submissions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CloudWatch Logs&lt;/strong&gt;: Collects logs from Lambda for debugging.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Event Bridge&lt;/strong&gt;: Previously called CloudWatch Rules, this triggers periodic events that are used to trigger a Lambda function that generates a list of user-submitted solutions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Route53&lt;/strong&gt;: The one service that doesn&amp;rsquo;t have a free tier, for .50 a month it manages the cmdchallenge.com DNS zone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Amazon Certificate Manager&lt;/strong&gt;: Free HTTPs certificates for all of cmdchallenge.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;breakdown-of-a-typical-monthly-bill&#34;&gt;Breakdown of a typical monthly bill&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/aws-bill.png&#34; alt=&#34;aws-bill&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;gcp---6month&#34;&gt;GCP - $6/month&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/gcp-bill.png&#34; alt=&#34;gcp-bill&#34;&gt;&lt;/p&gt;
&lt;p&gt;The production site uses an &lt;code&gt;e2-micro&lt;/code&gt; instance costing around $6/month, this is a bit more than we need typically but it gives us some headroom when the site gets busy.
There is only a single VM which is a single-point-of-failure for the site. This can cause a bit of disruption if there is a spontaneous reboot or if an upgrade is required.
Thankfully, in GCP this is very fast, and thanks to the multiple-layers of caching (CloudFlare, DynamoDB) in the serverless stack, it only causes a problem for unique submissions that haven&amp;rsquo;t been seen before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/cpu-memory.png&#34; alt=&#34;cpu-memory&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory utilization hovers around 300MB when there isn&amp;rsquo;t a lot of activity, this means that on smaller shared-core VMS like the &lt;code&gt;f1-micro&lt;/code&gt; some swap is necessary.&lt;/li&gt;
&lt;li&gt;CPU Utilization is generally low, though it varies because traffic due to site usage tends to be bursty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vm-comparison-for-shared-core-or-burstable-instances&#34;&gt;VM Comparison for shared-core or burstable instances&lt;/h2&gt;
&lt;p&gt;This architecture spans cloud providers to keep costs low as I found GCP gives a better value for the money on VMs compared to AWS at this lower tier.
Here is a current-as-of-now overview of cheap VMs under $15 from the main cloud providers.&lt;/p&gt;
&lt;p&gt;All of these are non-preemptable shared core instances or burst-rate limited in the case of AWS.
This means that you cannot count on using the full CPU all of the time.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Instance&lt;/th&gt;
&lt;th&gt;vCPUs&lt;/th&gt;
&lt;th&gt;Memory&lt;/th&gt;
&lt;th&gt;Price $/month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GCP f1-micro&lt;/td&gt;
&lt;td&gt;.2&lt;/td&gt;
&lt;td&gt;.6GB&lt;/td&gt;
&lt;td&gt;$5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GCP e2-micro&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1GB&lt;/td&gt;
&lt;td&gt;$6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GCP e2-small&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2GB&lt;/td&gt;
&lt;td&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GCP g1-small&lt;/td&gt;
&lt;td&gt;.5&lt;/td&gt;
&lt;td&gt;1.7GB&lt;/td&gt;
&lt;td&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS t2-nano&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.5GB&lt;/td&gt;
&lt;td&gt;$4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS t2-micro&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1GB&lt;/td&gt;
&lt;td&gt;$8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS LightSail&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.5GB&lt;/td&gt;
&lt;td&gt;$3.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS LightSail&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1GB&lt;/td&gt;
&lt;td&gt;$5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS LightSail&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2GB&lt;/td&gt;
&lt;td&gt;$10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Digital Ocean&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1GB&lt;/td&gt;
&lt;td&gt;$5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Digital Ocean&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2GB&lt;/td&gt;
&lt;td&gt;$10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Digital Ocean&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2GB&lt;/td&gt;
&lt;td&gt;$15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For GCP, preemptable instances would be cheaper but with only one it doesn&amp;rsquo;t really work since it would mean a service interruption.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;f1-micro&lt;/code&gt; is a bit too small for the main site, I use it for the &lt;a href=&#34;https://testing.cmdchallenge.com&#34;&gt;testing environment&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;AWS LightSail / Digital Ocean have basically the same offering and might also be a good fit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, the main site is powered by an &lt;code&gt;e2-micro&lt;/code&gt; instance for $6/month.
It offers 2 cores, which is more than the other options in the same price-range though it&amp;rsquo;s not uncommon to see stalls due to CPU steal:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/cpu-steal.png&#34; alt=&#34;cpu-steal&#34;&gt;&lt;/p&gt;
&lt;p&gt;It runs &lt;a href=&#34;https://cloud.google.com/container-optimized-os/docs&#34;&gt;Container Optimized OS&lt;/a&gt; and only runs Docker and a Prometheus exporter for node metrics.&lt;/p&gt;
&lt;h2 id=&#34;so-is-it-worth-it&#34;&gt;So, is it worth it?&lt;/h2&gt;
&lt;p&gt;From a cost perspective for now I still think so. Of course there is always a risk that something happens where my cloud spend will spiral out of control but if this were to happen I would just shut it down.
There is the meme &amp;ldquo;Wouldn&amp;rsquo;t it be easier to run this on a $5 DO droplet&amp;rdquo;? I think it might apply here, though the type of workload it runs is ideal for serverless because it is a single-page app where API Gateway requests are only required for submissions.  This keeps the number of Lambda executions low.&lt;/p&gt;
&lt;p&gt;Ignoring spend I think there are two big disadvantages to running servless. One is the complexity of gluing the cloud-native components together and keeping a configuration that is easy to manage and update.
This is solved by keeping everything in a single &lt;a href=&#34;https://gitlab.com/jarv/cmdchallenge/-/blob/master/terraform/site.tf&#34;&gt;terraform script&lt;/a&gt;, and though updates are automatically applied in CI I think there is a rather big initial investment in getting it to work properly.&lt;/p&gt;
&lt;p&gt;The other, bigger reason I found is that &lt;strong&gt;it&amp;rsquo;s difficult, if not impossible to test everything locally&lt;/strong&gt;,  without a lot more work which would be my number one complaint about this setup.
The way I have worked around this is to have an identical &lt;a href=&#34;https://testing.cmdchallenge.com&#34;&gt;testing environment&lt;/a&gt; running in parallel, this actually doesn&amp;rsquo;t cost anything extra because it doesn&amp;rsquo;t get any usage beyond a small amount of testing.&lt;/p&gt;
&lt;p&gt;To sum up, while it&amp;rsquo;s been fun for someone who enjoys doing infrastructure, I have been thinking about re-writing it all as a single server that run on a single VM, with sqlite as the db. I&amp;rsquo;m pretty sure it would perform better :)&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Moving to HTTP from REST for the AWS API Gateway</title>
       <link>https://jarv.org/posts/http-api-gateway/</link>
       <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/http-api-gateway/</guid>
       <description>&lt;h2 id=&#34;http-api-gateway&#34;&gt;HTTP API Gateway&lt;/h2&gt;
&lt;p&gt;When HTTP API Gateway was announced in 2019 the Amazon said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our goal is to make it as easy as possible for developers to build and manage APIs with API Gateway. We encourage you to try the new HTTP APIs and let us know what you think.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Today I decided to switch from using the REST API for cmdchallenge.com to the HTTP API and I must say it is &lt;em&gt;a lot&lt;/em&gt; easier to build and setup for simple HTTP APIS.
In Terraform, it now only requires two resources:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;aws_apigatewayv2_api&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;aws_lambda_permission&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compare this to the previous configuration using REST API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;aws_api_gateway_rest_api&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;aws_api_gateway_method&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;aws_api_gateway_integration&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;aws_lambda_permission&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;aws_api_gateway_deployment&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a full working example, see &lt;a href=&#34;https://gitlab.com/jarv/cmdchallenge/-/blob/master/terraform/modules/api/main.tf&#34;&gt;the API Gateway Terraform configuration&lt;/a&gt; for cmdchallenge.com. In addition to making the configuration simpler, it&amp;rsquo;s supposed to be &lt;em&gt;optimized for performance&lt;/em&gt; and this doesn&amp;rsquo;t disappoint either. Testing against an API endpoint that invokes a Lambda function and makes some DynamoDB calls there is a nice saving of around 100ms for the 50th percentile and 200ms for the 90th.&lt;/p&gt;
&lt;p&gt;REST API Gateway:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $ bombardier --latencies --rate &lt;span style=&#34;color:#099&#34;&gt;50&lt;/span&gt; -d 30s &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;https://g4jrkpyb3d.execute-api.us-east-1.amazonaws.com/r/?cmd=echo+hello+world&amp;amp;challenge_slug=hello_world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bombarding https://g4jrkpyb3d.execute-api.us-east-1.amazonaws.com:443/r/?cmd&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;echo+hello+world&amp;amp;&lt;span style=&#34;color:#008080&#34;&gt;challenge_slug&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;hello_world &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; 30s using &lt;span style=&#34;color:#099&#34;&gt;125&lt;/span&gt; connection&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[============================================================================================================================================================================]&lt;/span&gt; 30s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Done!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Statistics        Avg      Stdev        Max
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Reqs/sec        48.45      33.81     211.47
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Latency         1.13s   845.04ms      6.77s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Latency Distribution
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     50%      0.88s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     75%      0.99s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     90%      2.71s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     95%      2.92s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     99%      4.78s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  HTTP codes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1xx - 0, 2xx - 1501, 3xx - 0, 4xx - 0, 5xx - &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    others - &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Throughput:    86.94KB/s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTTP API Gateway:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ bombardier --latencies --rate &lt;span style=&#34;color:#099&#34;&gt;50&lt;/span&gt; -d 30s &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;https://ddzt9hixi4.execute-api.us-east-1.amazonaws.com/?cmd=echo+hello+world&amp;amp;challenge_slug=hello_world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bombarding https://ddzt9hixi4.execute-api.us-east-1.amazonaws.com:443/?cmd&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;echo+hello+world&amp;amp;&lt;span style=&#34;color:#008080&#34;&gt;challenge_slug&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;hello_world &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; 30s using &lt;span style=&#34;color:#099&#34;&gt;125&lt;/span&gt; connection&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[============================================================================================================================================================================]&lt;/span&gt; 30s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Done!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Statistics        Avg      Stdev        Max
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Reqs/sec        48.44      30.62     235.42
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Latency         0.93s   679.98ms      6.70s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Latency Distribution
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     50%   703.40ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     75%   731.99ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     90%      1.66s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     95%      2.70s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     99%      3.98s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  HTTP codes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1xx - 0, 2xx - 1501, 3xx - 0, 4xx - 0, 5xx - &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    others - &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Throughput:    33.19KB/s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;caching-responses-with-the-http-api-gateway&#34;&gt;Caching Responses with the HTTP API Gateway&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cmdchallenge.com&#34;&gt;Command Challenge&lt;/a&gt; has multiple layers of caching for anonymous usage.
If there wasn&amp;rsquo;t any caching, every single submission would execute in a Docker container, which would not only be atrocious from a performance standpoint but also expensive as it would require multiple/large VMs executing commands in containers.&lt;/p&gt;
&lt;p&gt;Every command that is submitted is hashed, and written to a DynamoDB table. If a subsequent command is identical for the same challenge, we return a cached response.
Putting CloudFront in front of API Gateway is a nice way to get additional caching for free, which works for the HTTP Gateway which &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html&#34;&gt;doesn&amp;rsquo;t have a caching feature&lt;/a&gt;. To cache HTTP API Gateway responses, create a CloudFront distribution with the API endpoint as the &lt;code&gt;Origin Domain Name&lt;/code&gt;.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Displaying the percentage of hosts completed during a rolling Ansible Deploy using serial</title>
       <link>https://jarv.org/posts/host-percentage/</link>
       <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/host-percentage/</guid>
       <description>&lt;p&gt;Recently we were looking at enhancing our deployment pipeline so that we run validation checks between every batch that is upgraded. For our VM deployments in Ansible we normally have&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;serial: 10%
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;so that 10% of the fleet is operated on at once, this includes draining from a load balancer before we upgrade the node, and adding it back to the load balancer after.&lt;/p&gt;
&lt;p&gt;With Ansible, it doesn&amp;rsquo;t seem like there is any built-in way to get the host percentage, so here is a hacky solution for others who want to do something similar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize a fact to an empty array:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we put this in &lt;code&gt;pre_tasks:&lt;/code&gt; you will need to keep in mind it is called on every batch, so you don&amp;rsquo;t want to override it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Initialize completed_hosts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;set_fact&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;completed_hosts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;{{ hostvars[&amp;#39;localhost&amp;#39;][&amp;#39;completed_hosts&amp;#39;] | default(&amp;#39;[]&amp;#39;) }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_to&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_facts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;run_once&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another option is initialize it in a play that runs before the play that is operating on hosts, in that case you can just initialize it to an empty array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Initialize completed_hosts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;set_fact&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;completed_hosts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;In post_tasks, append the current batch to completed_hosts:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Appends to completed hosts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;set_fact&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;completed_hosts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;{{ hostvars[&amp;#39;localhost&amp;#39;][&amp;#39;completed_hosts&amp;#39;] + ansible_play_batch }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_to&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_facts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Calculate a percentage:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Percentage complete&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;debug&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;msg&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Percentage complete: {{ ((hostvars[&amp;#39;localhost&amp;#39;][&amp;#39;completed_hosts&amp;#39;] | length) / (ansible_play_hosts | length) * 100) | int }}%&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;run_once&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_to&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is an example test play:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;test&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;gather_facts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;hosts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;some_host_group&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;serial&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;10%&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;pre_tasks&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;debug&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;msg&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;drain&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Initialize completed_hosts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;set_fact&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;completed_hosts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;{{ hostvars[&amp;#39;localhost&amp;#39;][&amp;#39;completed_hosts&amp;#39;] | default(&amp;#39;[]&amp;#39;) }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_to&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_facts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;run_once&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;tasks&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;debug&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;msg&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;deploy&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;post_tasks&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;debug&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;msg&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;enable&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Appends to completed hosts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;set_fact&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;completed_hosts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;{{ hostvars[&amp;#39;localhost&amp;#39;][&amp;#39;completed_hosts&amp;#39;] + ansible_play_batch }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_to&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_facts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Display current batch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;debug&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;var&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ansible_play_batch&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_to&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;run_once&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Display completed hosts&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;debug&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;msg&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Percentage complete: {{ ((hostvars[&amp;#39;localhost&amp;#39;][&amp;#39;completed_hosts&amp;#39;] | length) / (ansible_play_hosts | length) * 100) | int}}%&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;run_once&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;delegate_to&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;localhost&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Ensuring a consistent PID in a container</title>
       <link>https://jarv.org/posts/pid-docker/</link>
       <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/pid-docker/</guid>
       <description>&lt;p&gt;Recently a &lt;a href=&#34;https://oops.cmdchallenge.com/#/oops_print_process&#34;&gt;challenge was added&lt;/a&gt; that asks you to identify a process and kill it. This was a new type of exercise that requires a running process in the docker container where all commands are run. This itself wasn&amp;rsquo;t really an issue except that with caching, it requires that the state of the container to be identical from one run to the next. PIDs however, are not so predictable, even when you only have a very small wrapper.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PID 1: wrapper that run the command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PID 6 or 7: forked command passed to the wrapper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m not sure why sometimes the PID would be &lt;code&gt;6&lt;/code&gt; and other times &lt;code&gt;7&lt;/code&gt;, but this causes bit of a problem since if you executed a command like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -d /proc/&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might get a cached result, which doesn&amp;rsquo;t represent the PIDs that are running in the context of your next command.&lt;/p&gt;
&lt;p&gt;So like most, I went to stackoverflow and found &lt;a href=&#34;https://stackoverflow.com/questions/18122592/how-to-set-process-id-in-linux-for-a-specific-program&#34;&gt;this stackoverflow post&lt;/a&gt; it can be done by setting &lt;code&gt;ns_last_pid&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Open /proc/sys/kernel/ns_last_pid and get fd&lt;/li&gt;
&lt;li&gt;flock it with LOCK_EX&lt;/li&gt;
&lt;li&gt;write PID-1&lt;/li&gt;
&lt;li&gt;fork&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;But you can&amp;rsquo;t set this in a docker container unless you run it privileged, which is not a great idea for running arbitrary commands passed in by the Internet.&lt;/p&gt;
&lt;p&gt;Instead, this ended up getting solved with a very boring solution. For challenges where we need a running process, the wrapper cycles through all the PIDs up to PID number &lt;code&gt;41&lt;/code&gt;, and then forks the process that needed to be killed. The logic is quite simple, and looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;proc &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;(oopsProc: &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;var&lt;/span&gt; OopsProc, prog: &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; OOPS_PROG, targetPid: &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;42&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; oopsProc.slug.startsWith(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;oops&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;let&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; startProcess(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      command&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;OOPS_PROG, args&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;-t&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;, options&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;{poUsePath}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;let&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; p.waitForExit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p.close
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; p.processId &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; targetPid &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  oopsProc.p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; startProcess(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    command&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;OOPS_PROG, options&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;{poUsePath}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  oopsProc.pid &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; oopsProc.p.processId
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is how for challenge &amp;ldquo;&lt;a href=&#34;https://oops.cmdchallenge.com/#/oops_kill_a_process&#34;&gt;kill a process&lt;/a&gt;&amp;rdquo;, the answer is always &lt;code&gt;kill -9 42&lt;/code&gt;!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Cat without cat on the commandline</title>
       <link>https://jarv.org/posts/cat-without-cat/</link>
       <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/cat-without-cat/</guid>
       <description>&lt;p&gt;Say you want to display the contents of a file on the command line. The first tool we most of us reach for is &lt;code&gt;cat&lt;/code&gt;, which does a fine job at just this.
But what happens when you are on a Linux machine and when you try to cat a file this happens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-bash: cat: &lt;span style=&#34;color:#0086b3&#34;&gt;command&lt;/span&gt; not found
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or even:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash: fork: retry: No child processes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This post explores this idea and was a feature of this &lt;a href=&#34;https://oops.cmdchallenge.com/#/oops_print_file_contents&#34;&gt;challenge&lt;/a&gt; where you needed to display a file&amp;rsquo;s contents without using any utility outside of the shell.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;using-shell-built-ins-redirection-and-subshell&#34;&gt;Using shell built-ins, redirection and subshell&lt;/h2&gt;
&lt;p&gt;Using the shell builtin &lt;code&gt;read&lt;/code&gt; you can display the contents of a file, without a forking a new process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;read&lt;/span&gt; line; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$line&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt; &amp;lt;file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From the help page for &lt;code&gt;read&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One line is read from the standard input, or from file descriptor FD if the -u option is supplied, and the first word is assigned to the first NAME,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this example, the contents of file.txt are redirected to the STDIN of &lt;code&gt;read&lt;/code&gt;, which processes the input line by line, until it reaches the end of the file. &lt;code&gt;read&lt;/code&gt; also can take a file descriptor as its input instead of STDIN, so this will also work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;exec&lt;/span&gt; 3&amp;lt;file.txt &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Assign file descriptor 3 for reading&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;read&lt;/span&gt; -u &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; line; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$line&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ends up being a lot more typing than just &lt;code&gt;cat file.txt&lt;/code&gt;. With the &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt; there is a another way to display a file&amp;rsquo;s contents without using &lt;code&gt;cat&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;&amp;lt;file.txt&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this method uses redirection and command substitution, and is mentioned in the bash man page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The command substitution $(cat file) can be replaced by the equivalent but faster $(&amp;lt; file).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;rsquo;s faster, because you are not forking a cat, but does it matter? Probably not, and may not be clear to everyone what you are doing, but you can see a difference with a quick test on your shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#0086b3&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; n in &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;1..1000&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;&amp;lt;/etc/resolv.conf&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &amp;gt;/dev/null; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real	0m0.977s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user	0m0.380s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys	0m0.604s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#0086b3&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; n in &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;1..1000&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    cat /etc/resolv.conf &amp;gt;/dev/null;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real	0m1.980s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user	0m0.626s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys	0m1.224s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This syntax &lt;code&gt;$(&amp;lt;file.text)&lt;/code&gt; may look a bit strange, what you are doing is command substitution, where the contents of &lt;code&gt;file.txt&lt;/code&gt; are sent to STDIN which is then echo&amp;rsquo;d as STDOUT. If you want to learn a bit more about redirection using &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; see my earlier post about &lt;a href=&#34;https://jarv.org/posts/shell-redirection/&#34;&gt;shell redirection&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-other-utilities&#34;&gt;Using other utilities&lt;/h2&gt;
&lt;p&gt;How about other options? Without using shell built-ins but instead using other standard utilities you can also cat without cat:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ul &amp;lt; /file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ul&lt;/code&gt; might inadvertently underline some words in your file but I think it might be the only way to cat a file with only two characters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tac /file | tac
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you didn&amp;rsquo;t already guess, &lt;code&gt;tac&lt;/code&gt; is GNU core util that is the reverse of &lt;code&gt;cat&lt;/code&gt; so if you want to be clever you can pipe the output of &lt;code&gt;tac&lt;/code&gt; to &lt;code&gt;tac&lt;/code&gt; which is just a &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course using tools like &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, etc. will allow you to cat files as well, happy cat&amp;rsquo;ing!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interested in other ways to cat without cat? Try the &lt;a href=&#34;https://oops.cmdchallenge.com/#/oops_print_file_contents&#34;&gt;oops challenge&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Switching to Hugo</title>
       <link>https://jarv.org/posts/hugo-blog/</link>
       <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/hugo-blog/</guid>
       <description>&lt;p&gt;Hello world from the new blog using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; as the static site generator. After cutting away the cruft from the old one, which used Pelican as a static site generator, I decided to make a switch on a lazy Sunday. I definitely think the design is much nicer and site generation is much faster! There is a great selection of themes, this one uses the &lt;a href=&#34;https://themes.gohugo.io/hugo-kiera/&#34;&gt;kiera&lt;/a&gt; which is exactly what I wanted for a layout that doesn&amp;rsquo;t have too many bells and whistles.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Understanding shell redirection </title>
       <link>https://jarv.org/posts/shell-redirection/</link>
       <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/shell-redirection/</guid>
       <description>&lt;p&gt;When I was learning to use the shell for the first time I remember teaching myself to do things as I ran into problems, and the first problem I ran into was how to take the output of one command and write it to a file or pipe it a second command.&lt;/p&gt;
&lt;p&gt;So like most people, I learned:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmd1 | cmd2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to take the output of &lt;code&gt;cmd1&lt;/code&gt; and send it to &lt;code&gt;cmd2&lt;/code&gt;, and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmd1 &amp;gt; path/to/file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to take the output of &lt;code&gt;cmd1&lt;/code&gt; and write it to a file.&lt;/p&gt;
&lt;p&gt;This got me pretty far for what I needed to do without fully understanding how it worked or why. Eventually, I learned as well that there were multiple types of output, STDOUT and STDERR, and you could redirect one to the other by adding &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; to the end of commands. Early on, I wish I took the time to understand how redirection works and how it relates to file descriptors.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To understand this a bit better, first it&amp;rsquo;s helpful to understand file descriptors. At a very high level, file descriptors are numbers assigned by the operating system that reference open files. The shell will assign the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: STDIN - program input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: STDOUT - program output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;: STDERR - program error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When using a pipe &lt;code&gt;|&lt;/code&gt; or redirection &lt;code&gt;&amp;lt;&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt; it&amp;rsquo;s helpful to think abut these 3 file descriptors and their corresponding number assignments.&lt;/p&gt;
&lt;p&gt;Going back to the example where we are redirecting STDOUT of a program to a file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls &amp;gt; path/to/file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is is the same as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0&amp;gt; /path/to/file ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;0&lt;/code&gt; refers to STDOUT of &lt;code&gt;ls&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;redirecting-output&#34;&gt;Redirecting Output&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s break down exactly what &lt;code&gt;&amp;gt;&lt;/code&gt; is doing, from the bash man page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The general format for redirecting output is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [n]&amp;gt;word
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Where &lt;code&gt;[n]&lt;/code&gt; is a file descriptor, but in the example &lt;code&gt;&amp;gt; /path/to/file cmd&lt;/code&gt; there isn&amp;rsquo;t a file descriptor on left side! But there is actually, if you don&amp;rsquo;t specify a specific file descriptor, for output redirection, STDOUT is the default. Which means all of these redirections are exactly the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls &amp;gt; path/to/file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &amp;gt; /path/to/file ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ 1&amp;gt; /path/to/file ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note where it is more intuitive to put the &lt;code&gt;&amp;gt;&lt;/code&gt; after the command, it&amp;rsquo;s not necessary. This is because the position doesn&amp;rsquo;t matter because the descriptor to the left of &lt;code&gt;&amp;gt;&lt;/code&gt; is implicit. Pretty neat!&lt;/p&gt;
&lt;h3 id=&#34;redirecting-input&#34;&gt;Redirecting Input&lt;/h3&gt;
&lt;p&gt;Redirecting input is almost exactly the same, from the bash man page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The general format for redirecting output is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [n]&amp;lt;word
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that again there is a file descriptor on the left, and a file on the right. The only difference is that when using a &lt;code&gt;&amp;lt;&lt;/code&gt; the default file descriptor is &lt;code&gt;0&lt;/code&gt; (STDIN) if one isn&amp;rsquo;t specified. Therefore, all of these commands are equivalent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat &amp;lt; path/to/file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &amp;lt; path/to/file cat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ 0&amp;lt; path/to/file cat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, I think the first one is a bit more intuitive but it doesn&amp;rsquo;t matter whether the redirection is placed before or after the command.&lt;/p&gt;
&lt;h3 id=&#34;redirecting-stdout-to-stderr&#34;&gt;Redirecting stdout to stderr&lt;/h3&gt;
&lt;p&gt;So back to &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;, why is the &lt;code&gt;&amp;amp;&lt;/code&gt; necessary and what does it mean? Remember that for &lt;code&gt;&amp;gt;&lt;/code&gt; there needs to be a file descriptor on the left and a file on the right? If we used &lt;code&gt;2&amp;gt;1&lt;/code&gt; this would simply redirect STDOUT to a file named &lt;code&gt;1&lt;/code&gt;. By adding the &lt;code&gt;&amp;amp;&lt;/code&gt; it tells the shell that &lt;code&gt;1&lt;/code&gt; is referring not to a file, but a file descriptor!&lt;/p&gt;
&lt;p&gt;So the main things to remember when it comes to shell redirection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For redirecting input &lt;strong&gt;and&lt;/strong&gt; redirecting output, there should always be a file descriptor on the left, and a file (for reading, or writing) on the right.&lt;/li&gt;
&lt;li&gt;If a file descriptor is not specified, the default for output &lt;code&gt;&amp;gt;&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; (STDOUT) and the default for input &lt;code&gt;&amp;lt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; (STDIN).&lt;/li&gt;
&lt;li&gt;For redirecting STDOUT to STDERR, the &lt;code&gt;&amp;amp;&lt;/code&gt; is necessary on the right side, because you are redirecting to another file descriptor, instead of a file&lt;/li&gt;
&lt;li&gt;The best reference for all of this is the bash man page, which contains a lot more in-depth information on ways to redirect!&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>A new new new blog</title>
       <link>https://jarv.org/posts/new-new-new-blog/</link>
       <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/new-new-new-blog/</guid>
       <description>&lt;p&gt;Yeah it&amp;rsquo;s another blog update, just really some style updates and looking back at something I did a long time ago and say &lt;em&gt;what the heck was I thinking?&lt;/em&gt;. I don&amp;rsquo;t know, I think things that I don&amp;rsquo;t have time to spend up usually end up being a craptastic design by copy-and-paste. Anyway, still using Pelican but upgraded to Python3 and fixed the CI configuration a bit. Got rid of the bourbon/{sass,neat} mixins because that was so 2013. Still using sass though.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/getpelican/pelican&#34;&gt;pelican&lt;/a&gt; with a &lt;a href=&#34;https://github.com/jarv/water-iris&#34;&gt;custom theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;&lt;a href=&#34;http://bourbon.io/&#34;&gt;bourbon/sass&lt;/a&gt; - CSS compilation and general typography&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;&lt;a href=&#34;http://neat.bourbon.io/&#34;&gt;bourbon/neat&lt;/a&gt; - For layout and responsive design&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh and remove as much as possible like javascript easter-eggs and social links, because who needs that stuff :)&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Never use git submodules</title>
       <link>https://jarv.org/posts/submodules/</link>
       <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/submodules/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m writing this as a reminder to my future self never to use git submodules. For most things I would say never say never but let&amp;rsquo;s make an exception for this one.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used submodules for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is some logical separation or a clear defined interfaces between two things, and repos are cheap&lt;/li&gt;
&lt;li&gt;There is a 1 to many (usually 2 or 3) relationship between this thing (that has stable interface) and something else&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is that this 1-to-many thing usually starts as 1-to-2 and usually doesn&amp;rsquo;t go much further than that. It&amp;rsquo;s always &lt;em&gt;this could eventually increase in scale&lt;/em&gt; but usually those hunches are wrong.&lt;/p&gt;
&lt;p&gt;So where does it fall down? It seems like it rarely works well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cognitive overhead for multiple git commands to keep things updated&lt;/li&gt;
&lt;li&gt;Doing normal things with git (conflict resolution, reviews, etc) feels super clumsy&lt;/li&gt;
&lt;li&gt;With reviews, it often means reviewing multiple times and messes up approval workflows&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s 2020 and this process still looks unnecessarily complex &lt;a href=&#34;https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule&#34;&gt;https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My alternative for now for better gitops workflows is mono-repo everything, this seems to work better with CI anyway&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>The stages of a side project</title>
       <link>https://jarv.org/posts/side-projects/</link>
       <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/side-projects/</guid>
       <description>&lt;p&gt;One experience of mine, though it has roughly mapped to previous side projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wow this thing that has no business model is a cool idea, I wonder if anyone has done it before?&lt;/li&gt;
&lt;li&gt;This is fun, let&amp;rsquo;s spend an evening hacking on it&lt;/li&gt;
&lt;li&gt;Wow this is taking way more time than I thought it would &amp;hellip;&lt;/li&gt;
&lt;li&gt;Can I do this without spending any money? Let&amp;rsquo;s use AWS free tier to get this going&lt;/li&gt;
&lt;li&gt;OK let&amp;rsquo;s ship this thing, wow it&amp;rsquo;s getting a lot of attention! Front-page on hackernews, subreddit, etc.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m totally ready for this, I have a scaling plan&lt;/li&gt;
&lt;li&gt;Oops my scaling plan is completely useless because the bottlnecks are not where I expected they would be&lt;/li&gt;
&lt;li&gt;Wow traffic really drops off when it isn&amp;rsquo;t on hackernews 🤔&lt;/li&gt;
&lt;li&gt;Oh wait someone tweeted it, there goes traffic again..&lt;/li&gt;
&lt;li&gt;I should probably add CI to make this a bit easier to maintain&lt;/li&gt;
&lt;li&gt;OK things are stable again&lt;/li&gt;
&lt;li&gt;Wait my free tier is about to expire, let&amp;rsquo;s figure out how to host this for free by using multi-cloud&lt;/li&gt;
&lt;li&gt;Whoa this is taking longer than I thought&lt;/li&gt;
&lt;li&gt;.. years pass&lt;/li&gt;
&lt;li&gt;OK something is broken and getting some email complaints, I really have lost interest in this thing&lt;/li&gt;
&lt;li&gt;Have a free weekend, let&amp;rsquo;s look at the code from years ago&lt;/li&gt;
&lt;li&gt;Good god, it&amp;rsquo;s terrible&lt;/li&gt;
&lt;li&gt;Well, a bunch of things are now deprecated, let&amp;rsquo;s at least fix that&lt;/li&gt;
&lt;li&gt;OK so if I am going through this trouble I should probably re-write some of it, especially the last parts that were just thrown together&amp;hellip;&lt;/li&gt;
&lt;li&gt;Whoa this is taking longer than I thought&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Introducing a newer version of &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;cmdchallenge&lt;/a&gt; .. A lone survivor in a sea of broken things I have had an itch to build.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Using GitLab CICD for your static blog</title>
       <link>https://jarv.org/posts/jarv-org-cicd/</link>
       <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/jarv-org-cicd/</guid>
       <description>&lt;p&gt;In the process of making all of my private repositories public on Github and moving off of GitHub
pages I have also decided to move most of my repos over to GitLab.
One reason is that setting up a CICD pipeline makes it
extremely easy to publish these posts automatically. This in combination with GitLab&amp;rsquo;s
web IDE makes minor changes a little bit easier to make.&lt;/p&gt;
&lt;p&gt;CICD piplines in GitLab are controlled with a single file, &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; that is placed
at the root of the repository.
Wit this file, on every commit, the following pipeline runs that deploys to &lt;a href=&#34;https://draft.jarv.org&#34;&gt;draft.jarv.org&lt;/a&gt;
and on the master branch for &lt;a href=&#34;https://jarv.org&#34;&gt;jarv.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GitLab has integrated CI/CD runners that allow you to execute whatever you want in a docker
image of your choice for generating a &lt;a href=&#34;https://gitlab.com/jarv/jarv.org/-/pipelines/156823353&#34;&gt;deployment pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is what the &lt;code&gt;gitlab-ci.yml&lt;/code&gt; configuration looks like for the &lt;a href=&#34;https://gitlab.com/jarv/jarv.org/blob/master/.gitlab-ci.yml&#34;&gt;jarv.org repository&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Some notes about the setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are two stages, build and deploy. Build generates the html for the blog and deploy deploys it to both draft and the main site.&lt;/li&gt;
&lt;li&gt;Deploying to the main site only happens with a manual job&lt;/li&gt;
&lt;li&gt;I am using a custom image that has some of the blog dependencies pre-installed, it is created with &lt;a href=&#34;https://gitlab.com/jarv/jarv.org/blob/master/Dockerfile-ci&#34;&gt;this docker file&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Every time the deploy happens, an invalidate is sent to the cloudfront distribution in front of it.&lt;/li&gt;
&lt;li&gt;Since I am no longer using GitHub pages, the blog is hosted in an S3 bucket so the CICD pipeline does an &lt;code&gt;aws s3 sync ...&lt;/code&gt; to get the static files on the bucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a special key named &lt;code&gt;environment&lt;/code&gt; that hints to GitLab that the stage is a deploy step. With this the URL provided will show up under operations-&amp;gt;deployments like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jarv.org/img/jarv-envs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! It couldn&amp;rsquo;t be simpler and I think one of the nicest things about this setup is the ability to use the GitLab web ide to make quick changes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: I work for GitLab though the opinions here are my own.&lt;/em&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Removing all of my private repos from GitHub</title>
       <link>https://jarv.org/posts/removing-private-repos/</link>
       <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/removing-private-repos/</guid>
       <description>&lt;p&gt;Today I decided to remove all private repositories from GitHub.
Why? Interesting that having private repositories generally meant that
I was not being as careful about managing secrets properly. Checking in
API tokens, keys and especially cloud tokens into git &lt;em&gt;never&lt;/em&gt; a good idea
and looking through some of my old private repos I was doing exactly that.
So for others who are interested in going from a &lt;em&gt;developer&lt;/em&gt; GitHub account
back to free I highly recommend doing it! Granted it&amp;rsquo;s only $5 a month savings
but I definitely feel a bit more transparent than I did 15 minutes ago. :)
For finding secrets you can use something like &lt;a href=&#34;https://github.com/dxa4481/truffleHog&#34;&gt;trufflehog&lt;/a&gt;
to ensure that there no sensitive bits in your git history.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Building cmdchallenge using Lambda and API Gateway in the AWS free-tier with Docker and Go</title>
       <link>https://jarv.org/posts/building-cmdchallenge/</link>
       <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/building-cmdchallenge/</guid>
       <description>&lt;p&gt;Have you ever thought about building a side-project for fun without spending a lot on hosting?
This post might be for you. With the most tech-buzz-wordy title I could conjure up here is
a quick overview of how &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;cmdchallenge.com&lt;/a&gt; is built.
The site is a simple web application side-project that executes shell commands
remotely in a docker container in AWS. The front-end gives the feeling of a normal terminal but underneath
it is sending whatever commands you give it remotely on an EC2 instance inside a Docker container.&lt;/p&gt;
&lt;p&gt;The source code for most of it is located &lt;a href=&#34;https://github.com/jarv/cmdchallenge&#34;&gt;on github&lt;/a&gt; including
a tiny command executer written in Go, the challenge definitions, and a test harness.&lt;/p&gt;
&lt;p&gt;The following AWS services are used for the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloudfront&lt;/li&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;li&gt;S3 bucket&lt;/li&gt;
&lt;li&gt;Lambda function&lt;/li&gt;
&lt;li&gt;DynamoDB&lt;/li&gt;
&lt;li&gt;t2.micro EC2 Instance running coreos&lt;/li&gt;
&lt;li&gt;CloudWatch logs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to this Amazon Certificate Manager and Route53 was used but for everything above you can keep costs close to zero in AWS. There is no free tier for Route53 (sad panda) but it&amp;rsquo;s like 50 cents a month for a single zone.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Submit commands, execute them in a bash sub-shell.&lt;/li&gt;
&lt;li&gt;Check the output of the command for different challenges.&lt;/li&gt;
&lt;li&gt;Run tests for challenges that need them in addition or in place of checking output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deployment-tools-simple-and-boring&#34;&gt;Deployment tools (simple and boring)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Makefiles.&lt;/li&gt;
&lt;li&gt;Python fabric for running commands and copying files over ssh.&lt;/li&gt;
&lt;li&gt;Kappa, zips up code, sends it to lambda, also manages Lambda permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these tools the following automated steps are taken to deploy the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Docker image that holds the challenges.&lt;/li&gt;
&lt;li&gt;Launch a new coreos EC2 instance.&lt;/li&gt;
&lt;li&gt;Run a fabric script that does the following on the instance over SSH:
&lt;ul&gt;
&lt;li&gt;Configures TLS so that a Lambda function can communicate to Docker on an EC2 instance.&lt;/li&gt;
&lt;li&gt;Executes some periodic commands to ensure that the host cleans up old containers.&lt;/li&gt;
&lt;li&gt;Downloads the docker image that has the challenges.&lt;/li&gt;
&lt;li&gt;Copies the read-only volume that is used on the container for the tests and command runner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update Lambda with new code.&lt;/li&gt;
&lt;li&gt;Sync the static assets to S3.&lt;/li&gt;
&lt;li&gt;Invalidates CF cache for the main site.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;architecture-diagram&#34;&gt;Architecture diagram:&lt;/h2&gt;
&lt;p&gt;There are two public entry points for the site, one is the main web-site which is static and served S3.
The other is the API gateway at api.cmdchallenge.com which is also fronted by CloudFront so that it can
use a certificate from ACM and cache requests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  api.cmdchallenge.com         cmdchallenge.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ********************         ****************
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+---------------------+    +---------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|      Cloudfront     |    |      Cloudfront     |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+---------------------+    +---------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           |                          |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+---------------------+         +-----------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|    API Gateway      |         | s3 bucket |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+---------------------+         +-----------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  +-----------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |                 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  | Lambda Function |    +----------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |                 |--- |          |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  +-----------------+   \| DynamoDB |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           |             |          |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   +--------------+      +----------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   | EC2 t2.micro |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   |   (coreos)   |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   +--------------+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One nice thing about using AWS server-less components was that &lt;strong&gt;a single t2.micro instance ended up being fine for handling all of the load, even at peak.&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;See section on caching/performance below.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;here-is-what-happens-when-a-command-is-submitted-in-the-cmdchallengecom-terminalcmdchallengecom&#34;&gt;Here is what happens when a command is submitted in the &lt;a href=&#34;cmdchallenge.com&#34;&gt;cmdchallenge.com terminal&lt;/a&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Javascript code sends an HTTP GET to &lt;a href=&#34;https://api.cmdchallenge.com&#34;&gt;https://api.cmdchallenge.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If it is cached it returns a response immediately. If not, it forwards the request to the API gateway which in turn sends it to a Lambda function.&lt;/li&gt;
&lt;li&gt;The Lambda function looks up the challenge and the command in DynamoDb and if it already has an answer it returns that. If the challenge doesn&amp;rsquo;t exist in DyamoDB it is forwarded to the EC2 instance as a command using the docker API.&lt;/li&gt;
&lt;li&gt;The command that the user provides is passed to a Go command runner that executes the command in a bash sub-shell inside a docker container, checks the output and runs the tests.&lt;/li&gt;
&lt;li&gt;Results are returned to the Lambda function, it writes them to DynamoDb and returns the response.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-challenges-are-expressed-in-a-single-yaml-here-an-example-of-one-challenge&#34;&gt;The challenges are expressed in a single YAML, here an example of one challenge:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;slug&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;hello_world&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;version&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;author&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;cmdchallenge&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;description&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#d14&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;      Print &amp;#34;hello world&amp;#34;.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;      Hint: There are many ways to print text on
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;      the command line, one way is with the &amp;#39;echo&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;      command.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;      Try it below and good luck!&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;example&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;echo &amp;#39;hello world&amp;#39;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;expected_output&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;lines&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interested in coming up with your own? You can submit your own challenge with a &lt;a href=&#34;https://github.com/jarv/cmdchallenge/pulls&#34;&gt;pull request&lt;/a&gt;. Your challenge will be added to the user-contributed section of the site.&lt;/p&gt;
&lt;h2 id=&#34;caching&#34;&gt;Caching:&lt;/h2&gt;
&lt;p&gt;You may notice that when you do &lt;code&gt;echo hello world&lt;/code&gt; on the &lt;a href=&#34;https://cmdchallenge.com/#/hello_world&#34;&gt;hello world challenge&lt;/a&gt; it returns almost immediately.
As it is shown above there are two layers of cache, one at CloudFront and one at DynamoDb to reduce
the number of command executions on the Docker container.
API Gateway &lt;em&gt;can&lt;/em&gt; provide caching but it costs money, I worked around this by sticking CloudFront in front of it but this
is only possible with HTTP GETs.
With Cloudfront in front the cache-control header in
the response from Lambda is set to a very long cache lifetime with every request.
The version of the challenge as well as a global cache buster param is passed in so we never
have to worry about returning a response from a stale challenge.&lt;/p&gt;
&lt;h2 id=&#34;performance&#34;&gt;Performance:&lt;/h2&gt;
&lt;p&gt;If you are wondering how well this would scale for a lot of traffic, the Lambda function currently dispatches
commands to a random host in a statically configured list of EC2 instances making it pretty easy
to add more capacity. So far it seems to be operating fine with a single t2.micro EC2 instance handling
all command requests that are not cached.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time to get a &lt;code&gt;echo hello world&lt;/code&gt; response from a cached cloudfront command - &lt;strong&gt;~50ms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Time to get a &lt;code&gt;echo hello world&lt;/code&gt; response from a cached command in dynamoDB - &lt;strong&gt;~2.5s&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Time to get a &lt;code&gt;echo hello world&lt;/code&gt; response, executed in a container - &lt;strong&gt;~4s&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Without caching this wouldn&amp;rsquo;t be possible and also the caching at CloudFront enables most commands to
return fairly quickly.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;If you like the site please follow &lt;a href=&#34;https://twitter.com/thecmdchallenge&#34;&gt;@thecmdchallenge&lt;/a&gt; on twitter or if you have
suggestions drop me a mail at &lt;a href=&#34;mailto:info@cmdchallenge.com&#34;&gt;&lt;a href=&#34;mailto:info@cmdchallenge.com&#34;&gt;info@cmdchallenge.com&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>User Submitted Solutions</title>
       <link>https://jarv.org/posts/user-submitted-solutions/</link>
       <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/user-submitted-solutions/</guid>
       <description>&lt;p&gt;Adding to the interesting &lt;a href=&#34;https://jarv.org/191-hello-worlds.html&#34;&gt;191 ways to echo hello world&lt;/a&gt; I&amp;rsquo;ve now added the ability
to see &lt;a href=&#34;https://cmdchallenge.com/s/&#34;&gt;user-submitted solutions&lt;/a&gt; to &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;cmdchallenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some gems if you dig through them including maybe the longest regex I&amp;rsquo;ve ever seen for
pulling an IP address out of a file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;25&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-5&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|2&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-4&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;25&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-5&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|2&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-4&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;25&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-5&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|2&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-4&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;25&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-5&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|2&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-4&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;|&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;0-9&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;?&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also scrolling down the page of &lt;a href=&#34;https://cmdchallenge.com/s/#/corrupted_text&#34;&gt;solutions to the corrupted text problem&lt;/a&gt;
is glorious.&lt;/p&gt;
&lt;p&gt;&lt;s&gt;The solutions are not updated regularly right now but would be easy enough to do in the future if people want to see
more, let me know on &lt;a href=&#34;https://twitter.com/thecmdchallenge&#34;&gt;twitter&lt;/a&gt; and also&lt;/s&gt; &lt;strong&gt;Update&lt;/strong&gt;: Solutions are now generated every
five minutes. Feel free to submit suggestions for
new challenges on &lt;a href=&#34;https://github.com/jarv/cmdchallenge&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>figlet breakout</title>
       <link>https://jarv.org/posts/figlet-breakout/</link>
       <pubDate>Fri, 24 Feb 2017 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/figlet-breakout/</guid>
       <description>&lt;p&gt;I was looking for a cool ending for &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;cmdchallenge&lt;/a&gt; and decided
to dust off a 2 year old javascript project which created a breakout game from figlet
fonts. Not quite a full re-write but fixed a lot of bugs and did away completely with
coffee-script. More info on the &lt;a href=&#34;https://github.com/jarv/figlet-breakout&#34;&gt;github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or you can &lt;a href=&#34;https://www.jarv.org/figlet-breakout/#/click%20me%20to%20play&#34;&gt;click here to play&lt;/a&gt;.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>191 ways to echo hello world on the command line</title>
       <link>https://jarv.org/posts/191-hello-worlds/</link>
       <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/191-hello-worlds/</guid>
       <description>&lt;p&gt;It&amp;rsquo;s been about 12 days since the launch of &lt;a href=&#34;https://cmdchallenge.com&#34;&gt;cmdchallenge&lt;/a&gt;, a weekend project
to create some common command-line tasks that can be done in a single line of bash.
One common request has been to share user-submitted solutions. Or to put it another way,
you may be wondering &lt;em&gt;what do random people on the internet and hackernews type if you give them
some basic command-line tasks and a shell prompt?&lt;/em&gt;  Well lucky for me this is no longer a mystery!&lt;/p&gt;
&lt;p&gt;Starting off with Challenge #1:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cmdchallenge.com/#/hello_world&#34;&gt;CMD Challenge #1&lt;/a&gt;: &lt;strong&gt;print &amp;ldquo;hello world&amp;rdquo; at the bash prompt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There has been a lot of diverse input for such a simple task. I really love how people do weird stuff even when it is totally unnecessary.&lt;/p&gt;
&lt;p&gt;Here are some of my favorites:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i in h e l l o &lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt; w o r l d ; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt; |awk -F, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; {print $NR}&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; |tr -d &lt;span style=&#34;color:#d14&#34;&gt;\\&lt;/span&gt;n; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; ifmmp xpsme |tr bcdefghijklmnopqrstuvwxyza abcdefghijklmnopqrstuvwxyz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch helloworld &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; helloworld &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat helloworld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s.\.\...;yhHh\hh;ywWw\ww;2,$d&amp;#39;&lt;/span&gt; README
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A few things to note that may clarify some of the more interesting submissions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a &lt;code&gt;README&lt;/code&gt; in each challenge directory, in this case it contains the string &amp;ldquo;hello world&amp;rdquo; so some people took advantage of that.&lt;/li&gt;
&lt;li&gt;The directory itself was named &lt;code&gt;hello world&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are all of the correct submissions for the first challenge as of yesterday:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=(&lt;/span&gt;d e h l o r w X &lt;span style=&#34;color:#d14&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;;&lt;span style=&#34;color:#008080&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; 0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;s&lt;/span&gt;[@]&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt; ; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#008080&#34;&gt;$i&lt;/span&gt;]&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;|tr X&lt;span style=&#34;color:#d14&#34;&gt;\n&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; ; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt; ; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i in h e l l o &lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt; w o r l d ; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt; |awk -F, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; {print $NR}&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; |tr -d &lt;span style=&#34;color:#d14&#34;&gt;\\&lt;/span&gt;n; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i in h e l l o; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#008080&#34;&gt;$i&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; j in w o r l d; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#008080&#34;&gt;$j&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat README | head -n &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; | tail -n &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; | awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;{ print $3 &amp;#34; &amp;#34; $4 }&amp;#39;&lt;/span&gt; | sed -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/\&amp;#34;//g;s/\.//g&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; ifmmp xpsme |tr bcdefghijklmnopqrstuvwxyza abcdefghijklmnopqrstuvwxyz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; README grep hello | tr -d &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; | cut -f3- -d&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; | tr -d &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; | tr -d &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch helloworld &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; helloworld &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat helloworld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;letters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=(&lt;/span&gt;h e l l o &lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt; w o r l d&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;letters&lt;/span&gt;[@]&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch test.txt ; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; test.txt ; cat test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; README | sed -E &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/.*(hello world).*/\1/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat README | grep Print | sed -E &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/^.+&amp;#34;([^&amp;#34;]+)&amp;#34;.+$/\1/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; ./hiworld.txt &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat ./hiworld.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;head -n &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; &amp;lt; README  | sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/# //&amp;#39;&lt;/span&gt; | tr &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#008080&#34;&gt;$0&lt;/span&gt;|cut -d&lt;span style=&#34;color:#d14&#34;&gt;\;&lt;/span&gt; -f4;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;;hello world;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch file &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; file &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat README | sed -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/.*/hello world/&amp;#39;&lt;/span&gt; | head -1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;; ls *hell*; rm &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;head -1 README | cut -c3- | tr &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; hello.txt | cat hello.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;BEGIN {print &amp;#34;hello world&amp;#34;}&amp;#39;&lt;/span&gt; &amp;lt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; hello.txt; cat hello.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; testfile; cat testfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; test.txt; cat test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep hello README | awk -F&lt;span style=&#34;color:#d14&#34;&gt;\&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; n in &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; ; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s.\.\...;yhHh\hh;ywWw\ww;2,$d&amp;#39;&lt;/span&gt; README
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; foo.txt; cat foo.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;h&amp;#34;&amp;#34;e&amp;#34;&amp;#34;l&amp;#34;&amp;#34;l&amp;#34;&amp;#34;o&amp;#34;&amp;#34; &amp;#34;&amp;#34;w&amp;#34;&amp;#34;o&amp;#34;&amp;#34;r&amp;#34;&amp;#34;l&amp;#34;&amp;#34;d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ls h*| xargs &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat README| grep hello | cut -d &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; | awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;{print &amp;#34;hello world&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&amp;gt;hello | tail hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; BEGIN { print &amp;#34;hello world&amp;#34; } &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;HAHA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$HAHA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &amp;gt; henk | cat henk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#0086b3&#34;&gt;test&lt;/span&gt; &amp;amp; cat &lt;span style=&#34;color:#0086b3&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;BEGIN { print &amp;#34;hello world&amp;#34;; }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; world&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;printf &amp;#34;%s&amp;#34;, &amp;#34;hello world&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ls | tail -1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;BEGIN { print &amp;#34;hello world&amp;#34; }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;pwd&lt;/span&gt; | cut -d&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f4 | sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/_/ /g&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;; ls | grep ello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s%s%s%s\n&amp;#39;&lt;/span&gt; hel lo&lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt; wor ld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat README | grep -o &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; | sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/b/h/g&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; | awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;{print &amp;#34;hello world&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; tmp; cat tmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello world &amp;gt; henk; cat henk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;gt;/dev/stdout &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;BEGIN{print &amp;#34;hello world&amp;#34;;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;BEGIN{print(&amp;#34;hello world&amp;#34;)}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;gt;/dev/stderr &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;BEGIN {print &amp;#34;hello world&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&amp;gt;algo;cat algo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$hello&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;print &amp;#34;hello world\n&amp;#34;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;GGG&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; ; cat &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$GGG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo|awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;{print &amp;#34;hello world&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &amp;gt; /dev/stdout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;BEGIN{print &amp;#34;hello world&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls .. | grep hel | sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/_/ /g&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%s %s\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;print &amp;#34;hello world\n&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; s | sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/s/hello world/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34; world&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#!/bin/bash\necho &amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; -- &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s %s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%s %s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -le &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;print &amp;#34;hello world&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;print &amp;#34;hello world&amp;#34;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;print &amp;#39;hello world&amp;#39;;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; a ; cat a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n hello ; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34; world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;print &amp;#34;hello world&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;print &amp;#39;hello world&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;STR&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$STR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -E &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;say &amp;#34;hello world&amp;#34;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep hello &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;print &amp;#34;hello world&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -E &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;say q[hello world]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;; ls *&lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s %s\n&amp;#39;&lt;/span&gt; hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; | cat -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;VAR&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$VAR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;lt; &amp;lt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -E &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;say &amp;#34;hello world&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date|sed s/.*/hello&lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt;world/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;; ls he*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;  &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; | cat -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;print&amp;#34;hello world&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello %s\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%b\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo|sed -n &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;i hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;; ls h*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; | cat -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; %s&lt;span style=&#34;color:#d14&#34;&gt;\\&lt;/span&gt;n &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;dlrow olleh&amp;#39;&lt;/span&gt; | rev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s %s&amp;#39;&lt;/span&gt; hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%s %s&amp;#34;&lt;/span&gt; hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$i&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#d14&#34;&gt;&amp;lt;&amp;lt;EOF\nhello world\nEOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; -- &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world\n&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &amp;lt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello %s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello %s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; -- &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;dlrow olleh&amp;#34;&lt;/span&gt; | rev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; | cat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;PWD&lt;/span&gt;##*/&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;|tr _ &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world\013&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;%s &amp;#39;&lt;/span&gt; hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; | cat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/echo &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/echo &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; %s &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat - &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; -- &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; %s &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat - &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat - &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -ne &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;|cat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world\n&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello world | cat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&amp;#34;&amp;#34;hello world&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n  &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/echo hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; dlrow olleh|rev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;echo&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;   &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;hello world&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;hello world&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -n hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;  &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;printf&lt;/span&gt; hello&lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt;world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;$&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;$&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;  &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -e hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello world&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello&lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt;world;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello   world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;echo&amp;#39;&lt;/span&gt; hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello world &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello world&lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello world;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello &lt;span style=&#34;color:#d14&#34;&gt;\w&lt;/span&gt;orld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello  world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello&lt;span style=&#34;color:#d14&#34;&gt;\ &lt;/span&gt;world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt;  hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; hello world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;
&lt;p&gt;Of course there are a lot of quoting and space variations here as well. I will make a
data-dump available soon with the responses for all challenges.&lt;/p&gt;
&lt;p&gt;On the building and hosting side of things this is getting more than the usual tiny trickle of side-project internet traffic.
So far I have tried to contain the entire thing in an AWS free tier account, it has worked out OK so far with a
few hiccups here and there. Since several people have asked, I will share more details about how the site is put
together in a future post, follow &lt;a href=&#34;https://twitter.com/thecmdchallenge&#34;&gt;cmdchallenge on twitter&lt;/a&gt; or
use &lt;a href=&#34;https://jarv.org/rss.xml&#34;&gt;rss&lt;/a&gt;.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Reddit front-page visualization</title>
       <link>https://jarv.org/posts/reddit-time-lapse/</link>
       <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/reddit-time-lapse/</guid>
       <description>&lt;p&gt;Using data from &lt;a href=&#34;https://page-watch.com/#i/eLK&#34;&gt;page-watch.com&lt;/a&gt; this shows
a time-lapse of reddit overnight on January 20th taken at 5minute intervals.
This excludes images which is why there are occasional jumps where advertisements are.&lt;/p&gt;
&lt;p&gt;&lt;video width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;https://cdn.rawgit.com/jarv/page-watch-data/master/reddit/reddit.webm&#34;  controls&gt;&lt;/video&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>A new new blog</title>
       <link>https://jarv.org/posts/new-new-blog/</link>
       <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/new-new-blog/</guid>
       <description>&lt;p&gt;Before this year is over it&amp;rsquo;s time for a small redesign. I&amp;rsquo;ve replaced the old custom theme, &lt;a href=&#34;https://github.com/jarv/water-iris&#34;&gt;water-iris&lt;/a&gt; with
a new theme &lt;a href=&#34;https://github.com/jarv/jarvican&#34;&gt;jarvican&lt;/a&gt;.  Most of my updates these days are when I redesign the blog and I think
I&amp;rsquo;m fine with that.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>A new blog</title>
       <link>https://jarv.org/posts/new-blog/</link>
       <pubDate>Sun, 24 Nov 2013 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/new-blog/</guid>
       <description>&lt;p&gt;Hello world! It&amp;rsquo;s been awhile and what better way to re-visit a blog then to do a re-design.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/getpelican/pelican&#34;&gt;pelican&lt;/a&gt; with a &lt;a href=&#34;https://github.com/jarv/water-iris&#34;&gt;custom theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bourbon.io/&#34;&gt;bourbon/sass&lt;/a&gt; - CSS compilation and general typography&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://neat.bourbon.io/&#34;&gt;bourbon/neat&lt;/a&gt; - For layout and responsive design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve cleaned house and removed some old articles, kept some of the AVR hacks and hopefully will post updates more than once a year :)&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Simple highscore tracking with Python / Flask</title>
       <link>https://jarv.org/posts/simple-highscore-tracking-with-python-flask/</link>
       <pubDate>Mon, 17 Dec 2012 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/simple-highscore-tracking-with-python-flask/</guid>
       <description>&lt;p&gt;Below is a quick tutorial on how flask web framework might be
used for simple highscore tracking. All of the source code the state game &lt;a href=&#34;http://github.com/jarv/thestategame&#34;&gt;is now on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This code will accept an AJAX GET or POST at the end of each game so that scores can be tracked and read. Since the use-cases are simple it&amp;rsquo;s easy to write the tests first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;StateTestCase&lt;/span&gt;(unittest&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;TestCase):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;setUp&lt;/span&gt;(&lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;db_fd, state&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;config[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;DATABASE&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              tempfile&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;mkstemp()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          state&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;config[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;TESTING&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;test_client()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          state&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;init_db()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;tearDown&lt;/span&gt;(&lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          os&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;close(&lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;db_fd)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          os&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;unlink(state&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;config[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;DATABASE&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This above code will create an sqlite db before each test-case and
remove it when completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;test_empty_db&lt;/span&gt;(&lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rv &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/d&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;assert&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;loads(rv&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;data) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;test_single_entry&lt;/span&gt;(&lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      test_data &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;john doe&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#099&#34;&gt;1234&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#099&#34;&gt;1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rv &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/d&amp;#39;&lt;/span&gt;, data&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;test_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;ok&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;loads(rv&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rv &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/d&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;assert&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;loads(rv&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;data) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; [test_data]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;test_multiple_entries&lt;/span&gt;(&lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; score &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;25&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          data &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;john doe&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;: score,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#099&#34;&gt;1234&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          rv &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/d&amp;#39;&lt;/span&gt;, data&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;ok&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;loads(rv&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rv &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#999&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/d&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;len&lt;/span&gt;(json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;loads(rv&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;data)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These three test-cases cover basic functionality of the high-score
tracker:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that if a GET request is made before adding entries an empty
JSON array is returned.&lt;/li&gt;
&lt;li&gt;If a single entry is added with a POST ensure that the same results
are returned with a GET.&lt;/li&gt;
&lt;li&gt;If there are more than 10 entries added ensure that we only get 10
back.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the actual app there isn&amp;rsquo;t much more code than what was written for
the tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/d&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;get_scores&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      results &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; g&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;db&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;execute(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;select name, score, time from hs order by score limit 10&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      q &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#0086b3&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#0086b3&#34;&gt;zip&lt;/span&gt;([&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;], [item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; results]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;dumps(q)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Retrieve the top 10 scores, return the results as JSON.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/d&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;post_score&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      data &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;form
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; re&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;[\s\w]{1,20}$&amp;#39;&lt;/span&gt;, data[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;])):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;dumps({&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;invalid name&amp;#39;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; re&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;[0-9]+\.?[0-9]*$&amp;#39;&lt;/span&gt;, data[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;])):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;dumps({&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;invalid time&amp;#39;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; re&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;[0-9]{1,15}$&amp;#39;&lt;/span&gt;, data[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;])):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;dumps({&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;invalid score&amp;#39;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      g&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;db&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;insert into hs (name, score, time) values (?, ?, ?)&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   [data[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      g&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;db&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;dumps({&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Receive a new score, do some basic input validation and insert the new
high score entry.&lt;/p&gt;
&lt;p&gt;Of course it&amp;rsquo;s easy to inject fake high scores with something like this,
abuse it, cheat, etc. But in this case it&amp;rsquo;s just for fun.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>The State Game</title>
       <link>https://jarv.org/posts/the-state-game/</link>
       <pubDate>Sun, 22 Jul 2012 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/the-state-game/</guid>
       <description>&lt;p&gt;Below is a recent weekend programming project that I did to play with
canvas. Who doesn&amp;rsquo;t like a geography game?&lt;/p&gt;
&lt;p&gt;It uses a simple svg image for the map with a canvas overlay to detect
state clicks. On the back-end it uses a very short python script with
web.py. Most people who tried it out found the rotation to be annoying
and difficult; for me it makes it more interesting :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jarv.github.io/thestategame/&#34;&gt;&lt;img src=&#34;https://jarv.org/img/thestategame.png&#34; alt=&#34;thestategame&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Musical Ms. Pacman Candy Tin Hack</title>
       <link>https://jarv.org/posts/musical-ms-pacman-candy-tin-hack/</link>
       <pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/musical-ms-pacman-candy-tin-hack/</guid>
       <description>&lt;p&gt;Here is a weekend hack that uses the  &lt;a href=&#34;https://github.com/jarv/PlayTune&#34;&gt;midi to AVR
conversion script and library&lt;/a&gt;. With xmas fast approaching I thought
it would be fun to convert a pacman candy tin to an xmas ornament and
have it play music. Below is the result, pressing a button on the tin
will cycle through three Ms. Pacman songs converted from midi files
found online.&lt;/p&gt;
&lt;iframe src=&#34;http://www.youtube.com/embed/hyWlVr72n1M&#34; style=&#34;border: none&#34;&gt;&lt;/iframe&gt;
</description>
     </item>
   
     <item>
       <title>Custom musical greeting card for less than $5</title>
       <link>https://jarv.org/posts/custom-musical-greeting-card-for-less-than-5/</link>
       <pubDate>Sun, 20 Nov 2011 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/custom-musical-greeting-card-for-less-than-5/</guid>
       <description>&lt;p&gt;&amp;ldquo;You&amp;rsquo;ve got a friend in me&amp;rdquo; played on an attiny85 and two
speakers converted from a midi version of the song:&lt;/p&gt;
&lt;iframe src=&#34;http://www.youtube.com/embed/gntKQZFomi8&#34; style=&#34;border: none&#34;&gt;&lt;/iframe&gt;
</description>
     </item>
   
     <item>
       <title>Blinking motion sensor / Mario Brothers Candy Tin</title>
       <link>https://jarv.org/posts/usb-powered-blinking-ir-motion-sensor-mounted-in-a-mario-brothers-candy-tin/</link>
       <pubDate>Tue, 15 Sep 2009 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/usb-powered-blinking-ir-motion-sensor-mounted-in-a-mario-brothers-candy-tin/</guid>
       <description>&lt;p&gt;With an attiny13A, an IR motion sensor, and a candy Mario Brothers
mushroom tin, this project turns them into a USB powered IR sensor that
also blinks and sings.&lt;/p&gt;
&lt;iframe src=&#34;http://www.youtube.com/embed/A2rH835xQhY&#34; style=&#34;border: none&#34;&gt;&lt;/iframe&gt;
</description>
     </item>
   
     <item>
       <title>Singing Marioman</title>
       <link>https://jarv.org/posts/singing-marioman/</link>
       <pubDate>Sun, 24 May 2009 00:00:00 +0000</pubDate>
       
       <guid>https://jarv.org/posts/singing-marioman/</guid>
       <description>&lt;p&gt;Using an attiny13A and some leds and a speaker create a musical
marioman.&lt;/p&gt;
&lt;iframe src=&#34;http://www.youtube.com/embed/rCdSEzUQ3ok&#34; style=&#34;border: none&#34;&gt;&lt;/iframe&gt;
</description>
     </item>
   
 </channel>
</rss>
